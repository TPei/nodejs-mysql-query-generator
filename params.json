{"name":"Nodejs-mysql-query-generator","tagline":"parses optional get parameters of a nodejs request url and generates a mysql query","body":"```sh\r\nnpm install mysql-query-generator\r\n```\r\n\r\n- parses optional get parameters of a nodejs get request url and generates a mysql query\r\n- usage e.g. in REST API with extensive optional parameters for filtering\r\n\r\nConstructor:\r\n------------\r\n```js\r\nnew QueryGenerator(defaultLimit);\r\n```\r\nFor security reasons the construtor allows for providing a default limit value.\r\nSo if don't ever want to return more than x values, just put it in the constructor. If not, just leave it empty.\r\n\r\nprovides:\r\n---------\r\nfunction generateQueryAddition(url)\r\n- takes req.url object and generates a mysql addition query that can be added to a base query\r\n\r\nreq.url query format\r\n--------------------\r\n/someUrl?column.modifier=value\r\n\r\ncolumn: column to be filtered\r\nmodifier: type of filtering action\r\nvalue: value to be filtered for\r\n\r\n###currently supported query modifiers:\r\nmodifier => mysql code => example\r\n\r\n###general:\r\n- is => \"=\" => where column = value\r\n- isNot => \"!=\" => where column != value\r\n\r\n###strings only\r\n- contains => \"like\" => where column like '%value%'\r\n- containsNot => \"not like\" => where column not like '%value%'\r\n- startsWith => \"like value%\" => where columne like 'value%'\r\n- endsWith => \"like %value\" => where columne like '%value'\r\n\r\n###numbers only:\r\n- less => \"<\" => where column < value\r\n- lessOrEqual => \"<=\" => where column <= value\r\n- greater => \">\" => where column > value\r\n- greaterOrEqual => \">=\" => where column >= value\r\n\r\nillegal (those that are not supported) modifiers will be ignored\r\n\r\n###exception\r\n?limit=value\r\nlimits the returned results to a certain number of entries and doesn't require any modifier\r\n\r\nquery example:\r\n--------------\r\n?name.rocks=7&email.contains=@gmail&id.greater=10&id.lessOrEqual=100&limit=8\r\n\r\nwould return\r\n\"where email like '%@gmail%' and id > 10 and id <= 100 limit 8;\"\r\n\r\nnote: name.rocks is an illegal modifier and therefore ignored\r\n\r\nusage example:\r\n--------------\r\n```js\r\napp.get('/someUrl', function(req, res){\r\n    var QueryGenerator = require('mysql-query-generator');\r\n    var handler = new QueryGenerator(100);\r\n    var queryAddition = handler.generateQueryAddition(req.url);\r\n    var completeQuery = 'select id, username, email from users ' + queryAddition;\r\n});\r\n\r\n// assuming a req.url querystring like so: ?username.is=john&email.contains=john.doe&id.greaterOrEqual=10&limit=5\r\n// the complete query would be\r\nvar completeQuery = 'select id, username, email from users where name = \\'john\\' and email like \\'%john.doe%\\' and id >= 10 limit 5;\r\n```\r\n\r\nSecurity as of v0.3.0\r\n------------------------\r\n### Injections\r\nTo prevent sql injections certain characters and keywords are not allowed like:\r\n- quotes\r\n- whitespaces\r\n\r\n### Limit number of returned entries\r\nYou can provide a default limit in the constructor to make sure no more than that number of entries is returned.\r\n\r\nNPM\r\n---\r\n[Check it out at NPM!](https://www.npmjs.org/package/mysql-query-generator).\r\nnpm install mysql-query-generator\r\n\r\n### Originally intended as an addition to [query-sql](https://www.npmjs.org/package/query-sql).\r\nEasily generate simple queries using query-sql. Then automatically parse url get string and add the result as where clause for more extensive filtering.\r\n\r\nLicense\r\n-------\r\n[MIT](http://cheeaun.mit-license.org/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}